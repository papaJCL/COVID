{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","CardData","start","end","value","duration","separator","Graph","daily","setDaily","getAPI","lineGraph","labels","datasets","label","backgroundColor","fill","barChart","legend","display","title","text","hover","mode","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","Container","toUpperCase","Date","toDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1884d66.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport \"regenerator-runtime/runtime.js\";\r\n\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const getData = async (country) => {\r\n\r\n    let changeURL = url;\r\n\r\n    if (country && country!=\"global\" ){\r\n        changeURL = `${url}/countries/${country}`\r\n    }\r\n\r\n\r\n    try {\r\n        const { data } = await axios.get(changeURL);\r\n\r\n        const changedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n\r\n        return changedData;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\r\n            ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date\r\n            }));\r\n\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n       return countries.map((country) => country.name )\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../api'\r\nimport { TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    root: {\r\n        background: '#222',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n    },\r\n    inputRoot: {\r\n        color: \"#bbb\",\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#222\"\r\n        },\r\n    },\r\n    clearIndicator: {\r\n        color: \"#070707\"\r\n    }\r\n}));\r\n\r\nconst Countries = ({ setCountry }) => {\r\n\r\n    const [getCountries, setGetCountries] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const countries = [\r\n        { name: \"Global\" }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setGetCountries(await fetchCountries());\r\n        }\r\n        getCountries();\r\n    }, [setGetCountries])\r\n\r\n    const mapCountries = () => {\r\n        let test = getCountries.map((country, i) => country)\r\n        var len = test.length;\r\n        for (var i = 1; i < len + 1; i++) {\r\n            countries.push({\r\n                name: test[i - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue == null) {\r\n            setCountry(\"\".toLowerCase())\r\n        }\r\n        else {\r\n            setCountry(newValue.name.toLowerCase())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {mapCountries()}\r\n            <Autocomplete\r\n                onChange={handleChange}\r\n                classes={classes}\r\n                options={countries}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) =>\r\n                    <TextField\r\n                        {...params}\r\n                        placeholder=\"Search for a Country or Click One Below\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Countries","\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) { return 'Loading...' }\r\n    return (\r\n        <div>\r\n            <br />\r\n            <p >{\"DEATHS: \"}\r\n                <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"RECOVERED: \"}\r\n                <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"CONFIRMED CASES: \"}\r\n                <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardData;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../api';\r\nimport { Line, Bar } from  'react-chartjs-2';\r\n\r\n\r\nconst Graph = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [daily, setDaily] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getAPI = async () => {\r\n            setDaily(await fetchDaily());\r\n        }\r\n\r\n        getAPI();\r\n    } , []);\r\n\r\n    const lineGraph = (\r\n        daily.length ?\r\n            (<Line\r\n                data={{\r\n                    labels: daily.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: daily.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#333fff',\r\n                        backgroundColor: 'rgba(15, 128, 215, .1)',\r\n                        fill: true,\r\n                    }, {\r\n                        data: daily.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.2)',\r\n                        fill: true,\r\n                    } \r\n                  ],\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Deaths', 'Recovered', 'Infected'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(0, 0, 255, 0.5)'],\r\n                  data: [deaths.value, recovered.value, confirmed.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n              hover: {mode: null},\r\n            }}\r\n            \r\n          />\r\n        ) : null\r\n      );\r\n\r\n    return (\r\n        <div>\r\n            {country ? barChart : lineGraph}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { getData } from './api'\nimport Countries from './components/Countries'\nimport CardData from './components/CardData'\nimport Graph from './components/Graph'\nimport './app.css'\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    const retrieveData = async () => {\n      const newData = await getData();\n      console.log(\"data is \", newData)\n      setData(newData);\n    }\n    retrieveData();\n  }, [])\n\n  const retrieveCountry = async (newCountry) => {\n    const fetchedCountries = await getData(newCountry);\n    console.log('fetchedCountries is ', newCountry)\n\n    setData(fetchedCountries);\n    setCountry(newCountry);\n  }\n\n  const changeCountryString = () => {\n    if (country.length == 0)\n      return (\"GLOBAL STATS\");\n    else\n      return (country.toUpperCase() + \" STATS\")\n  }\n\n\n\n  return (\n      <Container>  \n        <h4 >{changeCountryString()}</h4>\n        <p ><i>Last update:  </i>{new Date(data.lastUpdate).toDateString()} </p>\n        <Countries setCountry={retrieveCountry} />\n        <CardData data={data} />\n        <Graph data={data} country={country} />\n      </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}