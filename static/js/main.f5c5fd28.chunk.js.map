{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","components/Header.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","paperWidth","marginLeft","marginRight","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","Paper","className","elevation","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","theme","createMuiTheme","palette","primary","main","secondary","error","marginTop","bullet","display","margin","transform","title","fontSize","cardContainer","CardData","renderCard","text","value","textColor","Card","justifyContent","CardContent","Typography","gutterBottom","prefix","start","end","duration","separator","Date","toDateString","ThemeProvider","Grid","container","spacing","justify","item","xs","md","paperPadding","marginBottom","buttonAlignment","alignItems","Graph","daily","setDaily","modifiedDaily","setModifiedDaily","alignment","setAlignment","isAnimation","setIsAnimation","RADIAN","Math","PI","PRIMARYCOLORS","getAPI","CustomizedAxisTick","props","x","y","payload","stroke","dy","textAnchor","fill","substring","handleClick","slicedNum","newDaily","slice","renderLineChart","align","ToggleButtonGroup","exclusive","newAlignment","size","ToggleButton","onClick","width","height","top","right","left","bottom","strokeDasharray","dataKey","tick","tickFormatter","toLocaleString","formatter","Intl","NumberFormat","format","verticalAlign","dot","type","renderPieChart","key","layout","cx","isAnimationActive","onAnimationEnd","label","cy","midAngle","innerRadius","outerRadius","percent","radius","index","cos","sin","dominantBaseline","toFixed","labelLine","entry","toUpperCase","component","charAt","flexGrow","menuButton","padding","Header","AppBar","position","Toolbar","IconButton","edge","window","location","reload","class","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5c5fd28.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport \"regenerator-runtime/runtime.js\";\r\n\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const getData = async (country) => {\r\n\r\n    let changeURL = url;\r\n\r\n    if (country && country!==\"global\" ){\r\n        changeURL = `${url}/countries/${country}`\r\n    }\r\n\r\n\r\n    try {\r\n        const { data } = await axios.get(changeURL);\r\n\r\n        const changedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n\r\n        return changedData;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\r\n            ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date\r\n            }));\r\n\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n       return countries.map((country) => country.name )\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../api'\r\nimport { TextField , Paper} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    root: {\r\n        background: '#ffff',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n    },\r\n    inputRoot: {\r\n        color: \"black\",\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"grey\"\r\n        },\r\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"grey\"\r\n        },\r\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"grey\"\r\n        },\r\n    },\r\n    clearIndicator: {\r\n        color: \"red\"\r\n    },\r\n    paperWidth: {\r\n        marginLeft: '15px',\r\n        marginRight: '15px',\r\n    }\r\n}));\r\n\r\nconst Countries = ({ setCountry }) => {\r\n\r\n    const [getCountries, setGetCountries] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const countries = [\r\n        { name: \"Global\" }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setGetCountries(await fetchCountries());\r\n        }\r\n        getCountries();\r\n    },\r\n        [setGetCountries])\r\n\r\n    const mapCountries = () => {\r\n        let test = getCountries.map((country, i) => country)\r\n        var len = test.length;\r\n        for (var i = 1; i < len + 1; i++) {\r\n            countries.push({\r\n                name: test[i - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue == null) {\r\n            setCountry(\"\".toLowerCase())\r\n        }\r\n        else {\r\n            setCountry(newValue.name.toLowerCase())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Paper className={classes.paperWidth} elevation={0}>\r\n                {mapCountries()}\r\n                <Autocomplete\r\n                    onChange={handleChange}\r\n                    classes={classes}\r\n                    options={countries}\r\n                    getOptionLabel={(option) => option.name}\r\n                    renderInput={(params) =>\r\n                        <TextField\r\n                            {...params}\r\n                            placeholder=\"Search for a Country or Click One Below\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    }\r\n                />\r\n            </Paper>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Countries","import { makeStyles, createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid, CardActions } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#84d4d8',\r\n        },\r\n        secondary: {\r\n            main: '#d88884',\r\n        },\r\n        error: {\r\n            main: '#84d888',\r\n        }\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: '5px',\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    cardContainer: {\r\n        marginLeft: '15px',\r\n        marginRight: '15px',\r\n    },\r\n});\r\n\r\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderCard = (text, value, color, textColor) => {\r\n        return (\r\n            <Card justifyContent=\"center\" className={classes.root}>\r\n                <CardContent className={color}>\r\n                    <Typography color=\"textSecondary\" gutterBottom variant=\"h5\">\r\n                        {text}\r\n                    </Typography>\r\n                    <Typography color={textColor} variant=\"h5\" gutterBottom>\r\n                        <CountUp prefix=\"+\" start={0} end={value} duration={1.5} separator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" gutterBottom >\r\n                        {new Date(lastUpdate).toDateString()}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n\r\n    if (!confirmed) { return 'Loading...' }\r\n    return (\r\n        <div className=\"cardContainer cardGrid\">\r\n            <ThemeProvider theme={theme}>\r\n                <Grid container spacing={3} justify='center'>\r\n                    <Grid item xs={12} md={4}>\r\n                        {renderCard(\"Confirmed Cases\", confirmed.value, \"confirmed\", \"primary\")}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                        {renderCard(\"Deaths\", deaths.value, \"deaths\", \"secondary\")}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                        {renderCard(\"Recovered\", recovered.value, \"recovered\", \"error\")}\r\n                    </Grid>\r\n                </Grid>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardData;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../api';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Sector, Cell, Brush, Text\r\n} from 'recharts';\r\nimport { Typography, Paper, ButtonGroup, Button } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport 'fontsource-roboto';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paperPadding: {\r\n        marginBottom: '10px',\r\n        marginLeft: '15px',\r\n        marginRight: '15px',\r\n    },\r\n    buttonAlignment: {\r\n        display: 'flex',\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n        marginBottom: \"25px\",\r\n    }\r\n}))\r\n\r\n\r\n\r\n\r\n\r\nconst Graph = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [daily, setDaily] = useState([]);\r\n\r\n    const [modifiedDaily, setModifiedDaily] = useState([])\r\n\r\n    const [alignment, setAlignment] = useState('right');\r\n\r\n    const [isAnimation, setIsAnimation] = useState(true);\r\n\r\n    const RADIAN = Math.PI / 180;\r\n\r\n    const PRIMARYCOLORS = ['#d88884', '#84d4d8', '#84d888'];\r\n\r\n    useEffect(() => {\r\n        const getAPI = async () => {\r\n            setDaily(await fetchDaily());\r\n            setModifiedDaily(await fetchDaily());\r\n        }\r\n        getAPI();\r\n    }, []);\r\n\r\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${(percent * 100).toFixed(0)}%`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------------------------\r\n    const data = modifiedDaily.map(({ date, confirmed, deaths }) => ({\r\n        'date': (date), 'confirmed': confirmed, 'deaths': deaths\r\n    }))\r\n\r\n    const totalDeathsToday = () => {\r\n        if (daily.length == 0)\r\n            return;\r\n        else\r\n            return (daily[daily.length - 1].deaths)\r\n    }\r\n\r\n    const CustomizedAxisTick = (props) => {\r\n\r\n        const { x, y, stroke, payload } = props;\r\n\r\n        return (\r\n            <g transform={`translate(${x},${y})`}>\r\n                <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" >{payload.value.substring(5)}</text>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    const yAxisLabel = ({ axisType, x, y, width, height, stroke, children }) => {\r\n        const isVert = axisType === 'yAxis';\r\n        const cx = isVert ? x : x + (width / 2);\r\n        const cy = isVert ? (height / 2) + y : y + height + 10;\r\n        const rot = isVert ? `270 ${cx} ${cy}` : 0;\r\n        return (\r\n            <text x={cx} y={cy} transform={`rotate(${rot})`} textAnchor=\"middle\" stroke={stroke}>\r\n                {children}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    const handleClick = (slicedNum) => {\r\n        if (slicedNum) {\r\n            let newDaily = daily.slice(-slicedNum)\r\n            setModifiedDaily(newDaily);\r\n        }\r\n        else {\r\n            setModifiedDaily(daily);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleAlignment = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n    };\r\n\r\n    const renderLineChart = (\r\n\r\n        daily.length ? (\r\n            <div>\r\n                <Paper className={classes.paperPadding}>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" gutterBottom>\r\n                        COVID-19 Daily Reports\r\n                </Typography>\r\n                    <ToggleButtonGroup\r\n                        value={alignment}\r\n                        exclusive\r\n                        onChange={handleAlignment}\r\n                        className={classes.buttonAlignment}\r\n                        size=\"small\"\r\n                    >\r\n                        <ToggleButton value=\"leftleft\" onClick={() => handleClick(5)}>\r\n                            5D\r\n                        </ToggleButton >\r\n                        <ToggleButton value=\"left\" onClick={() => handleClick(30)}>\r\n                            1M\r\n                        </ToggleButton >\r\n                        <ToggleButton value=\"center\" onClick={() => handleClick(180)}>\r\n                            6M\r\n                        </ToggleButton >\r\n                        <ToggleButton value=\"right\" onClick={() => handleClick()}>\r\n                            YTD\r\n                    </ToggleButton >\r\n                    </ToggleButtonGroup>\r\n                    <ResponsiveContainer width=\"100%\" height={500}>\r\n                        <LineChart data={data} margin={{ top: 5, right: 40, left: 45, bottom: 5, }} >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"date\" height={90} tick={<CustomizedAxisTick />} />\r\n                            <YAxis tickFormatter={tick => { return tick.toLocaleString(); }} />\r\n                            <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\r\n                            <Legend verticalAlign=\"bottom\" height={36} />\r\n                            <Line dot={false} type=\"monotone\" dataKey=\"confirmed\" stroke=\"#84d4d8\" />\r\n                            <Line dot={false} type=\"monotone\" dataKey=\"deaths\" stroke=\"#d88884\" />\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </Paper>\r\n            </div>\r\n        ) : null\r\n    );\r\n\r\n    const renderPieChart = (\r\n\r\n        daily.length ? (\r\n            <ResponsiveContainer width=\"100%\" height={400} key=\"makeid()\">\r\n                <PieChart>\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"bottom\" align=\"center\" />\r\n                    <Pie\r\n                        data={[\r\n                            { name: 'Deaths', value: deaths.value },\r\n                            { name: 'Confirmed', value: confirmed.value },\r\n                            { name: 'Recovered ', value: recovered.value }\r\n                        ]}\r\n\r\n                        stroke=\"none\"\r\n                        cx=\"50%\"\r\n                        isAnimationActive={isAnimation}\r\n                        onAnimationEnd={() => setIsAnimation(false)}\r\n                        label={renderCustomizedLabel}\r\n                        outerRadius={150}\r\n                        labelLine={false}\r\n                        fill=\"#8884d8\"\r\n                    >\r\n\r\n                        {\r\n                            data.map((entry, index) => <Cell fill={PRIMARYCOLORS[index % PRIMARYCOLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n\r\n        <div>\r\n            {country ? (\r\n                <div>\r\n                    <Paper className={classes.paperPadding}>\r\n                        <Typography align=\"center\" variant=\"h4\" color=\"textSecondary\" gutterBottom>\r\n                            {country.toUpperCase()}\r\n                        </Typography>\r\n                        {renderPieChart}\r\n                        <br />\r\n                        <Typography variant=\"overline\" align=\"center\" component=\"h2\" color=\"#e0e0e0\" gutterBottom>\r\n                            {country.charAt(0).toUpperCase() + country.slice(1)} has {(deaths.value / totalDeathsToday()).toFixed(4) * 100}% of all of COVID related dealths\r\n                    </Typography>\r\n                    </Paper>\r\n                </div>\r\n\r\n            )\r\n                : renderLineChart}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { Typography, AppBar, Toolbar, IconButton } from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: '500px',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    padding: {\r\n        marginBottom: '50px',\r\n    }\r\n}));\r\n\r\nconst Header = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar color=\"secondary\" position=\"fixed\" >\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" onClick={() => window.location.reload(false)}>\r\n                    <i class=\"fas fa-biohazard\"></i>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    COVID-19 Worldwide Tracker\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { getData } from './api'\r\nimport Countries from './components/Countries'\r\nimport CardData from './components/CardData'\r\nimport Graph from './components/Graph'\r\nimport Header from './components/Header'\r\nimport './app.css'\r\nimport { Typography } from '@material-ui/core';\r\nimport 'fontsource-roboto';\r\n\r\nfunction App() {\r\n\r\n  const [data, setData] = useState({});\r\n  const [country, setCountry] = useState('');\r\n\r\n  useEffect(() => {\r\n\r\n    const retrieveData = async () => {\r\n      const newData = await getData();\r\n      // console.log(\"data is \", newData)\r\n      setData(newData);\r\n    }\r\n    retrieveData();\r\n  }, [])\r\n\r\n  const retrieveCountry = async (newCountry) => {\r\n    const fetchedCountries = await getData(newCountry);\r\n    // console.log('fetchedCountries is ', newCountry)\r\n\r\n    setData(fetchedCountries);\r\n    setCountry(newCountry);\r\n  }\r\n\r\n  const changeCountryString = () => {\r\n    if (country.length === 0)\r\n      return (\"GLOBAL STATS\");\r\n    else\r\n      return (country.toUpperCase() + \" STATS\")\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <br/><br/><br/><br/>\r\n      <Countries setCountry={retrieveCountry} />\r\n      <br />\r\n      <CardData data={data} />\r\n      <br />\r\n      <Graph data={data} country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}