{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","minWidth","boxShadow","paddingTop","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CardData","renderCard","text","value","Card","className","CardContent","CardActions","start","end","duration","separator","Grid","container","spacing","alignContent","justify","item","md","Graph","React","memo","daily","setDaily","isAnimation","setIsAnimation","RADIAN","Math","PI","PRIMARYCOLORS","getAPI","CustomizedAxisTick","props","x","y","payload","stroke","dy","textAnchor","fill","renderLineChart","width","height","top","right","left","bottom","strokeDasharray","dataKey","tick","tickFormatter","toLocaleString","formatter","Intl","NumberFormat","format","verticalAlign","dot","type","renderPieChart","key","layout","align","cx","isAnimationActive","onAnimationEnd","label","cy","midAngle","innerRadius","outerRadius","percent","radius","index","cos","sin","dominantBaseline","toFixed","labelLine","entry","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","Container","toUpperCase","Date","toDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcbb6d87.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport \"regenerator-runtime/runtime.js\";\r\n\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const getData = async (country) => {\r\n\r\n    let changeURL = url;\r\n\r\n    if (country && country!==\"global\" ){\r\n        changeURL = `${url}/countries/${country}`\r\n    }\r\n\r\n\r\n    try {\r\n        const { data } = await axios.get(changeURL);\r\n\r\n        const changedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n\r\n        return changedData;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\r\n            ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date\r\n            }));\r\n\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n       return countries.map((country) => country.name )\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../api'\r\nimport { TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    root: {\r\n        background: '#ffff',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n    },\r\n    inputRoot: {\r\n        color: \"#0D2451\",\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#222\"\r\n        },\r\n    },\r\n    clearIndicator: {\r\n        color: \"red\"\r\n    }\r\n}));\r\n\r\nconst Countries = ({ setCountry }) => {\r\n\r\n    const [getCountries, setGetCountries] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const countries = [\r\n        { name: \"Global\" }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setGetCountries(await fetchCountries());\r\n        }\r\n        getCountries();\r\n    },\r\n        [setGetCountries])\r\n\r\n    const mapCountries = () => {\r\n        let test = getCountries.map((country, i) => country)\r\n        var len = test.length;\r\n        for (var i = 1; i < len + 1; i++) {\r\n            countries.push({\r\n                name: test[i - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue == null) {\r\n            setCountry(\"\".toLowerCase())\r\n        }\r\n        else {\r\n            setCountry(newValue.name.toLowerCase())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {mapCountries()}\r\n            <Autocomplete\r\n                onChange={handleChange}\r\n                classes={classes}\r\n                options={countries}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) =>\r\n                    <TextField\r\n                        {...params}\r\n                        placeholder=\"Search for a Country or Click One Below\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Countries","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid , CardActions } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        boxShadow: '0 5px 10px rgba(154,160,185,.05), 0 15px 40px rgba(166,173,201,.2)',\r\n        paddingTop: '5px',\r\n       \r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderCard = (text, value) => {\r\n        return (\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    {text}\r\n                </CardContent>\r\n                <CardActions>\r\n                    <CountUp start={0} end={value} duration={1.5} separator=\",\" />\r\n                </CardActions>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n\r\n    if (!confirmed) { return 'Loading...' }\r\n    return (\r\n        <Grid container spacing={3} alignContent='center' justify='center'>\r\n            <Grid item md={3}>\r\n            {renderCard(\"CONFIRMED CASES\" , confirmed.value)}\r\n            </Grid>\r\n            <Grid item md={3}>\r\n            {renderCard(\"DEATHS\" , deaths.value)}\r\n            </Grid>\r\n            <Grid item md={3}>\r\n            {renderCard(\"RECOVERED\" , recovered.value)}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default CardData;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../api';\r\n\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Sector, Cell, Brush, Text\r\n} from 'recharts';\r\n\r\n\r\nconst Graph = React.memo(({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n    const [daily, setDaily] = useState([]);\r\n\r\n    const [isAnimation, setIsAnimation] = useState(true);\r\n\r\n    const RADIAN = Math.PI / 180;\r\n\r\n    const PRIMARYCOLORS = ['#ff3300', '#0066ff', '#00b300'];\r\n\r\n    useEffect(() => {\r\n        const getAPI = async () => {\r\n            setDaily(await fetchDaily());\r\n        }\r\n\r\n        getAPI();\r\n    }, []);\r\n\r\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${(percent * 100).toFixed(0)}%`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------------------------\r\n    const data = daily.map(({ date, confirmed, deaths }) => ({\r\n        'date': (date), 'confirmed': confirmed, 'deaths': deaths\r\n    })\r\n    )\r\n\r\n    const totalDeathsToday = () => {\r\n        if (daily.length == 0)\r\n            return;\r\n        else\r\n            return (daily[daily.length - 1].deaths)\r\n    }\r\n\r\n    const CustomizedAxisTick = (props) => {\r\n\r\n        const { x, y, stroke, payload } = props;\r\n\r\n        return (\r\n            <g transform={`translate(${x},${y})`}>\r\n                <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{payload.value}</text>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    const yAxisLabel = ({ axisType, x, y, width, height, stroke, children }) => {\r\n        const isVert = axisType === 'yAxis';\r\n        const cx = isVert ? x : x + (width / 2);\r\n        const cy = isVert ? (height / 2) + y : y + height + 10;\r\n        const rot = isVert ? `270 ${cx} ${cy}` : 0;\r\n        return (\r\n          <text x={cx} y={cy} transform={`rotate(${rot})`} textAnchor=\"middle\" stroke={stroke}>\r\n            {children}\r\n          </text>\r\n        );\r\n      };\r\n\r\n\r\n\r\n    const renderLineChart = (\r\n        daily.length ? (\r\n            <ResponsiveContainer width=\"99%\" height={700}>\r\n                <LineChart data={data} margin={{ top: 5, right: 40, left: 45, bottom: 5, }} >\r\n                    <CartesianGrid strokeDasharray=\"3 3\"  />\r\n                    <XAxis dataKey=\"date\" height={90} tick={<CustomizedAxisTick />} />\r\n                    <YAxis  tickFormatter={tick => { return tick.toLocaleString(); }} />\r\n                    <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\r\n                    <Legend verticalAlign=\"top\" height={36} />\r\n                    <Brush dataKey=\"name\" height={30} stroke=\"green\" />\r\n                    <Line dot={false} type=\"monotone\" dataKey=\"confirmed\" stroke=\"#0066ff\" />\r\n                    <Line dot={false} type=\"monotone\" dataKey=\"deaths\" stroke=\"#ff3300\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        ) : null\r\n    );\r\n\r\n    const renderPieChart = (\r\n\r\n        daily.length ? (\r\n            <ResponsiveContainer width=\"99%\" height={400} key=\"makeid()\">\r\n                <PieChart>\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Pie\r\n                        data={[\r\n                            { name: 'Deaths', value: deaths.value },\r\n                            { name: 'Confirmed', value: confirmed.value },\r\n                            { name: 'Recovered ', value: recovered.value }\r\n                        ]}\r\n                        \r\n                        stroke=\"none\"\r\n                        cx=\"50%\"\r\n                        isAnimationActive={isAnimation}\r\n                        onAnimationEnd={() => setIsAnimation(false)}\r\n                        label={renderCustomizedLabel}\r\n                        outerRadius={150}\r\n                        labelLine={false}\r\n                        fill=\"#8884d8\"\r\n                    >\r\n\r\n                        {\r\n                            data.map((entry, index) => <Cell fill={PRIMARYCOLORS[index % PRIMARYCOLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n\r\n        <div>\r\n            {country ? (\r\n                <div>\r\n                    {renderPieChart}\r\n                    <h1> {country} has {(deaths.value / totalDeathsToday()).toFixed(4) * 100}% of all of COVID related dealths</h1>\r\n                </div>\r\n\r\n            )\r\n                : renderLineChart}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { getData } from './api'\nimport Countries from './components/Countries'\nimport CardData from './components/CardData'\nimport Graph from './components/Graph'\nimport './app.css'\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    const retrieveData = async () => {\n      const newData = await getData();\n      // console.log(\"data is \", newData)\n      setData(newData);\n    }\n    retrieveData();\n  }, [])\n\n  const retrieveCountry = async (newCountry) => {\n    const fetchedCountries = await getData(newCountry);\n    // console.log('fetchedCountries is ', newCountry)\n\n    setData(fetchedCountries);\n    setCountry(newCountry);\n  }\n\n  const changeCountryString = () => {\n    if (country.length === 0)\n      return (\"GLOBAL STATS\");\n    else\n      return (country.toUpperCase() + \" STATS\")\n  }\n\n\n\n  return (\n    <div>\n      <Container>\n        <h4 >{changeCountryString()}</h4>\n        <p ><i>Last update:  </i>{new Date(data.lastUpdate).toDateString()} </p>\n        <Countries setCountry={retrieveCountry} />\n        <br/>\n        <CardData data={data} />\n        <br/>\n       <Graph data={data} country={country} />\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}