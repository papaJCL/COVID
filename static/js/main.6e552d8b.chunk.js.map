{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","CardData","start","end","value","duration","separator","Graph","daily","setDaily","firstPieActiveIndex","setFirstPieActiveIndex","secondPieActiveIndex","setSecondPieActiveIndex","getAPI","totalDeathsToday","renderLineChart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","tick","toLocaleString","formatter","Intl","NumberFormat","format","stroke","dot","type","RADIAN","Math","PI","PRIMARYCOLORS","SECONDARYCOLORS","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","renderActiveShape","props","startAngle","endAngle","payload","sx","sy","mx","my","ex","ey","d","r","dy","renderPieChart","layout","verticalAlign","align","activeIndex","activeShape","label","labelLine","onMouseEnter","entry","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","Container","toUpperCase","Date","toDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e552d8b.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport \"regenerator-runtime/runtime.js\";\r\n\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const getData = async (country) => {\r\n\r\n    let changeURL = url;\r\n\r\n    if (country && country!=\"global\" ){\r\n        changeURL = `${url}/countries/${country}`\r\n    }\r\n\r\n\r\n    try {\r\n        const { data } = await axios.get(changeURL);\r\n\r\n        const changedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n\r\n        return changedData;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\r\n            ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date\r\n            }));\r\n\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n       return countries.map((country) => country.name )\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../api'\r\nimport { TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    root: {\r\n        background: '#ffff',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n    },\r\n    inputRoot: {\r\n        color: \"#0D2451\",\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#222\"\r\n        },\r\n    },\r\n    clearIndicator: {\r\n        color: \"red\"\r\n    }\r\n}));\r\n\r\nconst Countries = ({ setCountry }) => {\r\n\r\n    const [getCountries, setGetCountries] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const countries = [\r\n        { name: \"Global\" }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setGetCountries(await fetchCountries());\r\n        }\r\n        getCountries();\r\n    },\r\n        [setGetCountries])\r\n\r\n    const mapCountries = () => {\r\n        let test = getCountries.map((country, i) => country)\r\n        var len = test.length;\r\n        for (var i = 1; i < len + 1; i++) {\r\n            countries.push({\r\n                name: test[i - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue == null) {\r\n            setCountry(\"\".toLowerCase())\r\n        }\r\n        else {\r\n            setCountry(newValue.name.toLowerCase())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {mapCountries()}\r\n            <Autocomplete\r\n                onChange={handleChange}\r\n                classes={classes}\r\n                options={countries}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) =>\r\n                    <TextField\r\n                        {...params}\r\n                        placeholder=\"Search for a Country or Click One Below\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Countries","\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) { return 'Loading...' }\r\n    return (\r\n        <div>\r\n            <br />\r\n            <p >{\"DEATHS: \"}\r\n                <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"RECOVERED: \"}\r\n                <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"CONFIRMED CASES: \"}\r\n                <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardData;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../api';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Sector, Cell, Brush\r\n} from 'recharts';\r\n\r\n\r\nconst Graph = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n    const [daily, setDaily] = useState([]);\r\n    \r\n    const [firstPieActiveIndex, setFirstPieActiveIndex] = useState(0)\r\n    const [secondPieActiveIndex, setSecondPieActiveIndex] = useState(0)\r\n\r\n    const firstPieEnter = (data, index ) => {\r\n        // console.log(\"landed onPieEnter with data \", data)\r\n        // console.log(\"index is \", index)\r\n        setFirstPieActiveIndex(index);\r\n    }\r\n\r\n    const secondPieEnter = (data, index) => {\r\n        setSecondPieActiveIndex(index);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const getAPI = async () => {\r\n            setDaily(await fetchDaily());\r\n        }\r\n\r\n        getAPI();\r\n    }, []);\r\n\r\n    \r\n\r\n\r\n    // -------------------------------------------------------------------------------------------------------------\r\n    const data = daily.map(({ date, confirmed, deaths }) => ({\r\n        'date': (date), 'confirmed': confirmed, 'deaths': deaths\r\n    })\r\n    )\r\n\r\n    const pieData = [\r\n        { name: 'Group A', value: deaths },\r\n        { name: 'Group B', value: recovered },\r\n        { name: 'Group C', value: confirmed },\r\n    ];\r\n\r\n    const piedata1 = [\r\n        { name: 'Group A', value: 400 },\r\n        { name: 'Group B', value: 300 },\r\n        { name: 'Group C', value: 300 }\r\n    ];\r\n\r\n    const totalDeathsToday = () => {\r\n        if (daily.length == 0)\r\n            return;\r\n        else\r\n            return (daily[daily.length - 1].deaths)\r\n    }\r\n\r\n\r\n    const renderLineChart = (\r\n        daily.length ? (\r\n        <ResponsiveContainer width=\"99%\" height={700}>\r\n            <LineChart data={data} margin={{ top: 5, right: 30, left: 40, bottom: 5, }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis tickFormatter={tick => { return tick.toLocaleString(); }} />\r\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\r\n                <Legend />\r\n                <Brush dataKey=\"name\" height={30} stroke=\"#8884d8\" />\r\n                <Line dot={false} type=\"monotone\" dataKey=\"confirmed\" stroke=\"#8884d8\" />\r\n                <Line dot={false} type=\"monotone\" dataKey=\"deaths\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n        ) : null\r\n    );\r\n\r\n\r\n    const RADIAN = Math.PI / 180;\r\n\r\n\r\n    const PRIMARYCOLORS = ['#0088FE', '#00C49F', '#FFBB28'];\r\n    const SECONDARYCOLORS = ['red', 'blue']\r\n\r\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${(percent * 100).toFixed(0)}%`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    const renderActiveShape = (props) => {\r\n        const RADIAN = Math.PI / 180;\r\n        const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\r\n            fill, payload, percent, value } = props;\r\n        const sin = Math.sin(-RADIAN * midAngle);\r\n        const cos = Math.cos(-RADIAN * midAngle);\r\n        const sx = cx + (outerRadius + 10) * cos;\r\n        const sy = cy + (outerRadius + 10) * sin;\r\n        const mx = cx + (outerRadius + 30) * cos;\r\n        const my = cy + (outerRadius + 30) * sin;\r\n        const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n        const ey = my;\r\n        const textAnchor = cos >= 0 ? 'start' : 'end';\r\n\r\n        return (\r\n            <g>\r\n                {/* <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text> */}\r\n                <Sector\r\n                    cx={cx}\r\n                    cy={cy}\r\n                    innerRadius={innerRadius}\r\n                    outerRadius={outerRadius}\r\n                    startAngle={startAngle}\r\n                    endAngle={endAngle}\r\n                    fill={fill}\r\n                />\r\n                <Sector\r\n                    cx={cx}\r\n                    cy={cy}\r\n                    startAngle={startAngle}\r\n                    endAngle={endAngle}\r\n                    innerRadius={outerRadius + 6}\r\n                    outerRadius={outerRadius + 10}\r\n                    fill={fill}\r\n                />\r\n                <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\" />\r\n                <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n                <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">{`PV ${value}`}</text>\r\n                <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\r\n                    {`(Rate ${(percent * 100).toFixed(2)}%)`}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const renderPieChart = (\r\n        daily.length ? (\r\n            <ResponsiveContainer width=\"99%\" height={700}>\r\n                <PieChart>\r\n                    <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />\r\n                    <Pie\r\n                        data={[\r\n                            { name: 'Deaths', value: deaths.value },\r\n                            { name: 'Confirmed', value: confirmed.value },\r\n                            { name: 'Recovered ', value: recovered.value }\r\n                        ]}\r\n                        cy=\"30%\"\r\n                        cx=\"50%\"\r\n                        activeIndex={firstPieActiveIndex}\r\n                        activeShape={renderActiveShape}\r\n                        label={renderCustomizedLabel}\r\n                        outerRadius={110}\r\n                        labelLine={false}\r\n                        fill=\"#8884d8\"\r\n                        onMouseEnter={firstPieEnter}\r\n                    >\r\n\r\n                        {\r\n                            data.map((entry, index) => <Cell fill={PRIMARYCOLORS[index % PRIMARYCOLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                    <Pie\r\n                        data={[\r\n                            { name: `${country} Deaths`, value: deaths.value },\r\n                            { name: 'World Dealths', value: totalDeathsToday() },\r\n                        ]}\r\n                        cy=\"75%\"\r\n                        cx=\"50%\"\r\n                        activeIndex={secondPieActiveIndex}\r\n                        activeShape={renderActiveShape}\r\n                        label={renderCustomizedLabel}\r\n                        outerRadius={110}\r\n                        labelLine={false}\r\n                        fill=\"#8884d8\"\r\n                        onMouseEnter={secondPieEnter}\r\n                    >\r\n                        {\r\n                            data.map((entry, index) => <Cell fill={SECONDARYCOLORS[index % SECONDARYCOLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        ) : null\r\n    )\r\n\r\n\r\n    const print = () => {\r\n        console.log(daily)\r\n        console.log(totalDeathsToday())\r\n        //console.log(data[1])\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {/* {print()} */}\r\n            {country ? (\r\n                <div>\r\n                    {renderPieChart}\r\n                    <h1> {country} has 50% of all of COVID related dealths</h1>\r\n                </div>\r\n             )\r\n              : renderLineChart}\r\n            {/* {renderPieChart} */}\r\n            {/* {renderLineChart} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { getData } from './api'\nimport Countries from './components/Countries'\nimport CardData from './components/CardData'\nimport Graph from './components/Graph'\nimport './app.css'\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    const retrieveData = async () => {\n      const newData = await getData();\n      // console.log(\"data is \", newData)\n      setData(newData);\n    }\n    retrieveData();\n  }, [])\n\n  const retrieveCountry = async (newCountry) => {\n    const fetchedCountries = await getData(newCountry);\n    // console.log('fetchedCountries is ', newCountry)\n\n    setData(fetchedCountries);\n    setCountry(newCountry);\n  }\n\n  const changeCountryString = () => {\n    if (country.length == 0)\n      return (\"GLOBAL STATS\");\n    else\n      return (country.toUpperCase() + \" STATS\")\n  }\n\n\n\n  return (\n    <div>\n      <Container>\n        <h4 >{changeCountryString()}</h4>\n        <p ><i>Last update:  </i>{new Date(data.lastUpdate).toDateString()} </p>\n        <Countries setCountry={retrieveCountry} />\n        <CardData data={data} />\n        <Graph data={data} country={country} />\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}