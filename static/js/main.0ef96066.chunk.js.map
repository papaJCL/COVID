{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","CardData","start","end","value","duration","separator","Graph","daily","setDaily","getAPI","data1","renderLineChart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","dot","type","stroke","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","Container","toUpperCase","Date","toDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ef96066.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport \"regenerator-runtime/runtime.js\";\r\n\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const getData = async (country) => {\r\n\r\n    let changeURL = url;\r\n\r\n    if (country && country!=\"global\" ){\r\n        changeURL = `${url}/countries/${country}`\r\n    }\r\n\r\n\r\n    try {\r\n        const { data } = await axios.get(changeURL);\r\n\r\n        const changedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n\r\n        return changedData;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\r\n            ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date\r\n            }));\r\n\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n       return countries.map((country) => country.name )\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../api'\r\nimport { TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    root: {\r\n        background: '#ffff',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n    },\r\n    inputRoot: {\r\n        color: \"#0D2451\",\r\n        \"& .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"black\"\r\n        },\r\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: \"#222\"\r\n        },\r\n    },\r\n    clearIndicator: {\r\n        color: \"red\"\r\n    }\r\n}));\r\n\r\nconst Countries = ({ setCountry }) => {\r\n\r\n    const [getCountries, setGetCountries] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const countries = [\r\n        { name: \"Global\" }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setGetCountries(await fetchCountries());\r\n        }\r\n        getCountries();\r\n    },\r\n        [setGetCountries])\r\n\r\n    const mapCountries = () => {\r\n        let test = getCountries.map((country, i) => country)\r\n        var len = test.length;\r\n        for (var i = 1; i < len + 1; i++) {\r\n            countries.push({\r\n                name: test[i - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue == null) {\r\n            setCountry(\"\".toLowerCase())\r\n        }\r\n        else {\r\n            setCountry(newValue.name.toLowerCase())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {mapCountries()}\r\n            <Autocomplete\r\n                onChange={handleChange}\r\n                classes={classes}\r\n                options={countries}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) =>\r\n                    <TextField\r\n                        {...params}\r\n                        placeholder=\"Search for a Country or Click One Below\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Countries","\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) { return 'Loading...' }\r\n    return (\r\n        <div>\r\n            <br />\r\n            <p >{\"DEATHS: \"}\r\n                <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"RECOVERED: \"}\r\n                <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n            <p >{\"CONFIRMED CASES: \"}\r\n                <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\" />\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardData;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../api';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\n\r\n\r\nconst Graph = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [daily, setDaily] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getAPI = async () => {\r\n            setDaily(await fetchDaily());\r\n        }\r\n\r\n        getAPI();\r\n    }, []);\r\n\r\n    const lineGraph = (\r\n        daily.length ?\r\n            (<Line\r\n                data={{\r\n                    labels: daily.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: daily.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#333fff',\r\n                        backgroundColor: 'rgba(15, 128, 215, .1)',\r\n                        fill: true,\r\n                    }, {\r\n                        data: daily.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.2)',\r\n                        fill: true,\r\n                    }\r\n                    ],\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Deaths', 'Recovered', 'Infected'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(0, 0, 255, 0.5)'],\r\n                            data: [deaths.value, recovered.value, confirmed.value],\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}` },\r\n                    hover: { mode: null },\r\n                }}\r\n\r\n            />\r\n        ) : null\r\n    );\r\n\r\n\r\n    // -------------------------------------------------------------------------------------------------------------\r\n    const data1 = [\r\n        {\r\n            'date': '12-02-21', 'confirmed': 555555, 'deaths': 666666\r\n        },\r\n        {\r\n            'date': '12-02-22', 'confirmed': 33333, 'deaths': 2222\r\n        }\r\n    ];\r\n\r\n    //'date': date, 'confirmed': confirmed, 'deaths': deaths\r\n\r\n    const data = daily.map(({ date, confirmed, deaths }) => ({\r\n        'date':(date), 'confirmed': confirmed, 'deaths': deaths\r\n    })\r\n    )\r\n\r\n    const renderLineChart = (\r\n        <ResponsiveContainer width=\"99%\" height={700}>\r\n            <LineChart\r\n\r\n                data={data}\r\n                margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line dot={false} type=\"monotone\" dataKey= \"confirmed\" stroke=\"#8884d8\" />\r\n                <Line  dot={false}type=\"monotone\" dataKey=\"deaths\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n\r\n    const print = () => {\r\n        console.log(data1[0])\r\n        console.log(data[1])\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {/* {country ? barChart : lineGraph} */}\r\n            {print()}\r\n            {renderLineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { getData } from './api'\nimport Countries from './components/Countries'\nimport CardData from './components/CardData'\nimport Graph from './components/Graph'\nimport './app.css'\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    const retrieveData = async () => {\n      const newData = await getData();\n      // console.log(\"data is \", newData)\n      setData(newData);\n    }\n    retrieveData();\n  }, [])\n\n  const retrieveCountry = async (newCountry) => {\n    const fetchedCountries = await getData(newCountry);\n    // console.log('fetchedCountries is ', newCountry)\n\n    setData(fetchedCountries);\n    setCountry(newCountry);\n  }\n\n  const changeCountryString = () => {\n    if (country.length == 0)\n      return (\"GLOBAL STATS\");\n    else\n      return (country.toUpperCase() + \" STATS\")\n  }\n\n\n\n  return (\n    <div>\n      <Container>\n        <h4 >{changeCountryString()}</h4>\n        <p ><i>Last update:  </i>{new Date(data.lastUpdate).toDateString()} </p>\n        <Countries setCountry={retrieveCountry} />\n        <CardData data={data} />\n        <Graph data={data} country={country} />\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}