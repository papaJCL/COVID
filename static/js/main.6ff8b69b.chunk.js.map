{"version":3,"sources":["api/index.js","components/Countries.js","components/CardData.js","components/Graph.js","App.js","index.js"],"names":["url","getData","country","a","changeURL","axios","get","data","changedData","confirmed","recovered","deaths","lastUpdate","fetchDaily","map","date","reportDate","total","fetchCountries","countries","name","console","log","useStyles","makeStyles","root","background","borderRadius","border","color","inputRoot","borderColor","clearIndicator","paperWidth","marginLeft","marginRight","Countries","setCountry","useState","getCountries","setGetCountries","classes","useEffect","Paper","className","elevation","test","i","len","length","push","mapCountries","Autocomplete","onChange","event","newValue","toLowerCase","options","getOptionLabel","option","renderInput","params","TextField","placeholder","variant","fullWidth","boxShadow","marginTop","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CardData","renderCard","text","value","Card","CardContent","start","end","duration","separator","Date","toDateString","Grid","container","spacing","justify","item","md","paperPadding","Graph","daily","setDaily","isAnimation","setIsAnimation","RADIAN","Math","PI","PRIMARYCOLORS","getAPI","CustomizedAxisTick","props","x","y","payload","stroke","dy","textAnchor","fill","renderLineChart","Typography","align","gutterBottom","width","height","top","right","left","bottom","strokeDasharray","dataKey","tick","tickFormatter","toLocaleString","formatter","Intl","NumberFormat","format","verticalAlign","dot","type","renderPieChart","key","layout","cx","isAnimationActive","onAnimationEnd","label","cy","midAngle","innerRadius","outerRadius","percent","radius","index","cos","sin","dominantBaseline","toFixed","labelLine","entry","toUpperCase","component","charAt","slice","App","setData","newData","retrieveData","retrieveCountry","newCountry","fetchedCountries","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ff8b69b.chunk.js","sourcesContent":["import axios from 'axios';\nimport \"regenerator-runtime/runtime.js\";\n\n\nconst url = \"https://covid19.mathdro.id/api\"\n\nexport const getData = async (country) => {\n\n    let changeURL = url;\n\n    if (country && country!==\"global\" ){\n        changeURL = `${url}/countries/${country}`\n    }\n\n\n    try {\n        const { data } = await axios.get(changeURL);\n\n        const changedData = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths: data.deaths,\n            lastUpdate: data.lastUpdate,\n        }\n\n        return changedData;\n    } catch (e) {\n        return e;\n    }\n}\n\nexport const fetchDaily = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        return data.map(({ confirmed, deaths, reportDate: date }) =>\n            ({\n                confirmed: confirmed.total,\n                deaths: deaths.total,\n                date\n            }));\n\n    } catch (e) {\n        return e;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data:{countries}} = await axios.get(`${url}/countries`)\n       return countries.map((country) => country.name )\n    } catch (e) {\n        console.log(e)\n        return e;\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchCountries } from '../api'\nimport { TextField , Paper} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(({\n\n    root: {\n        background: '#ffff',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n    },\n    inputRoot: {\n        color: \"#0D2451\",\n        \"& .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"black\"\n        },\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"black\"\n        },\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"#222\"\n        },\n    },\n    clearIndicator: {\n        color: \"red\"\n    },\n    paperWidth: {\n        marginLeft: '15px',\n        marginRight: '15px',\n    }\n}));\n\nconst Countries = ({ setCountry }) => {\n\n    const [getCountries, setGetCountries] = useState([]);\n\n    const classes = useStyles();\n\n    const countries = [\n        { name: \"Global\" }\n    ]\n\n    useEffect(() => {\n        const getCountries = async () => {\n            setGetCountries(await fetchCountries());\n        }\n        getCountries();\n    },\n        [setGetCountries])\n\n    const mapCountries = () => {\n        let test = getCountries.map((country, i) => country)\n        var len = test.length;\n        for (var i = 1; i < len + 1; i++) {\n            countries.push({\n                name: test[i - 1]\n            });\n        }\n    }\n\n    const handleChange = (event, newValue) => {\n        if (newValue == null) {\n            setCountry(\"\".toLowerCase())\n        }\n        else {\n            setCountry(newValue.name.toLowerCase())\n        }\n    }\n\n    return (\n        <div >\n            <Paper className={classes.paperWidth} elevation={3}>\n                {mapCountries()}\n                <Autocomplete\n                    onChange={handleChange}\n                    classes={classes}\n                    options={countries}\n                    getOptionLabel={(option) => option.name}\n                    renderInput={(params) =>\n                        <TextField\n                            {...params}\n                            placeholder=\"Search for a Country or Click One Below\"\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    }\n                />\n            </Paper>\n        </div>\n    )\n\n\n\n}\n\nexport default Countries","import { makeStyles } from \"@material-ui/core/styles\";\nimport React from 'react';\nimport { Card, CardContent, Typography, Grid , CardActions } from '@material-ui/core';\nimport CountUp from 'react-countup';\n\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        boxShadow: '0 5px 10px rgba(154,160,185,.05), 0 15px 40px rgba(166,173,201,.2)',\n        marginTop: '5px',\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst CardData = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    const classes = useStyles();\n\n    const renderCard = (text, value , color) => {\n        return (\n            <Card className={classes.root}>\n                <CardContent className={color}/>\n                <CardContent>\n                    {text}\n                </CardContent>\n                <CardContent>\n                    <CountUp start={0} end={value} duration={1.5} separator=\",\" />\n                </CardContent>\n                <CardContent>\n                    {new Date(lastUpdate).toDateString()}\n                </CardContent>\n            </Card>\n        )\n    }\n\n\n    if (!confirmed) { return 'Loading...' }\n    return (\n        <Grid container spacing={1}  justify='center'>\n            <Grid item md={3}>\n            {renderCard(\"CONFIRMED CASES\" , confirmed.value , \"confirmed\")}\n            </Grid>\n            <Grid item md={3}>\n            {renderCard(\"DEATHS\" , deaths.value, \"deaths\")}\n            </Grid>\n            <Grid item md={3}>\n            {renderCard(\"RECOVERED\" , recovered.value, \"recovered\")}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default CardData;","import React, { useState, useEffect } from 'react';\nimport { fetchDaily } from '../api';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Sector, Cell, Brush, Text\n} from 'recharts';\nimport { Typography , Paper } from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport 'fontsource-roboto';\nimport { Container } from 'reactstrap';\n\nconst useStyles = makeStyles(() => ({\n  paperPadding: {\n    marginBottom: '10px',\n    marginLeft: '15px',\n    marginRight: '15px',\n  },\n}))\n\n\n\n\n\nconst Graph = ({ data: { confirmed, recovered, deaths }, country }) => {\n\n    const classes = useStyles()\n\n    const [daily, setDaily] = useState([]);\n\n    const [isAnimation, setIsAnimation] = useState(true);\n\n    const RADIAN = Math.PI / 180;\n\n    const PRIMARYCOLORS = ['#d88884', '#84d4d8', '#84d888'];\n\n    useEffect(() => {\n        const getAPI = async () => {\n            setDaily(await fetchDaily());\n        }\n        getAPI();\n    }, []);\n\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n        return (\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                {`${(percent * 100).toFixed(0)}%`}\n            </text>\n        );\n    };\n\n\n\n\n    // -------------------------------------------------------------------------------------------------------------\n    const data = daily.map(({ date, confirmed, deaths }) => ({\n        'date': (date), 'confirmed': confirmed, 'deaths': deaths\n    })\n    )\n\n    const totalDeathsToday = () => {\n        if (daily.length == 0)\n            return;\n        else\n            return (daily[daily.length - 1].deaths)\n    }\n\n    const CustomizedAxisTick = (props) => {\n\n        const { x, y, stroke, payload } = props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{payload.value}</text>\n            </g>\n        );\n    }\n\n    const yAxisLabel = ({ axisType, x, y, width, height, stroke, children }) => {\n        const isVert = axisType === 'yAxis';\n        const cx = isVert ? x : x + (width / 2);\n        const cy = isVert ? (height / 2) + y : y + height + 10;\n        const rot = isVert ? `270 ${cx} ${cy}` : 0;\n        return (\n          <text x={cx} y={cy} transform={`rotate(${rot})`} textAnchor=\"middle\" stroke={stroke}>\n            {children}\n          </text>\n        );\n      };\n\n\n\n    const renderLineChart = (\n        daily.length ? (\n            <Paper className={classes.paperPadding}>\n            <Typography variant=\"h2\" align=\"center\" color=\"textSecondary\" gutterBottom>\n                        GLOBAL STATISTICS\n                    </Typography>\n            <ResponsiveContainer width=\"100%\" height={700}>\n                <LineChart data={data} margin={{ top: 5, right: 40, left: 45, bottom: 5, }} >\n                    <CartesianGrid strokeDasharray=\"3 3\"  />\n                    <XAxis dataKey=\"date\" height={90} tick={<CustomizedAxisTick />} />\n                    <YAxis  tickFormatter={tick => { return tick.toLocaleString(); }} />\n                    <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                    <Legend verticalAlign=\"bottom\" height={36} />\n                    <Brush dataKey=\"name\" height={30} verticalAlign=\"bottom\" stroke=\"green\" />\n                    <Line dot={false} type=\"monotone\" dataKey=\"confirmed\" stroke=\"#84d4d8\" />\n                    <Line dot={false} type=\"monotone\" dataKey=\"deaths\" stroke=\"#d88884\" />\n                </LineChart>\n            </ResponsiveContainer>\n            </Paper>\n        ) : null\n    );\n\n    const renderPieChart = (\n\n        daily.length ? (\n            <ResponsiveContainer width=\"100%\" height={400} key=\"makeid()\">\n                <PieChart>\n                    <Legend layout=\"horizontal\" verticalAlign=\"bottom\" align=\"center\" />\n                    <Pie\n                        data={[\n                            { name: 'Deaths', value: deaths.value },\n                            { name: 'Confirmed', value: confirmed.value },\n                            { name: 'Recovered ', value: recovered.value }\n                        ]}\n                        \n                        stroke=\"none\"\n                        cx=\"50%\"\n                        isAnimationActive={isAnimation}\n                        onAnimationEnd={() => setIsAnimation(false)}\n                        label={renderCustomizedLabel}\n                        outerRadius={150}\n                        labelLine={false}\n                        fill=\"#8884d8\"\n                    >\n\n                        {\n                            data.map((entry, index) => <Cell fill={PRIMARYCOLORS[index % PRIMARYCOLORS.length]} />)\n                        }\n                    </Pie>\n                </PieChart>\n            </ResponsiveContainer>\n        ) : null\n    )\n\n    return (\n\n        <div>\n            {country ? (\n                <div>\n                    <Paper className={classes.paperPadding}> \n                    <Typography align=\"center\" variant=\"h2\" color=\"textSecondary\" gutterBottom>\n                        {country.toUpperCase()}\n                    </Typography>\n                    {renderPieChart}\n                    <br/>\n                     <Typography variant=\"overline\" align=\"center\" component=\"h2\" color=\"#e0e0e0\" gutterBottom>\n                        {country.charAt(0).toUpperCase() + country.slice(1)} has {(deaths.value / totalDeathsToday()).toFixed(4) * 100}% of all of COVID related dealths\n                    </Typography>\n                    </Paper>\n                </div>\n\n            )\n                : renderLineChart}\n        </div>\n    )\n};\n\nexport default Graph;\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { getData } from './api'\nimport Countries from './components/Countries'\nimport CardData from './components/CardData'\nimport Graph from './components/Graph'\nimport './app.css'\nimport { Typography } from '@material-ui/core';\nimport 'fontsource-roboto';\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    const retrieveData = async () => {\n      const newData = await getData();\n      // console.log(\"data is \", newData)\n      setData(newData);\n    }\n    retrieveData();\n  }, [])\n\n  const retrieveCountry = async (newCountry) => {\n    const fetchedCountries = await getData(newCountry);\n    // console.log('fetchedCountries is ', newCountry)\n\n    setData(fetchedCountries);\n    setCountry(newCountry);\n  }\n\n  const changeCountryString = () => {\n    if (country.length === 0)\n      return (\"GLOBAL STATS\");\n    else\n      return (country.toUpperCase() + \" STATS\")\n  }\n\n\n\n  return (\n    <div>\n      <Countries setCountry={retrieveCountry} />\n        <Container>\n        <CardData data={data} />\n      </Container>\n        <br/>\n       <Graph data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}